
# coding: utf-8

# In[21]:


malware = open("malwareBenignScores.txt", "r")
test = open


# In[22]:


with open("malwareBenignScores.txt", "r") as fp:
   line = fp.readline()
   cnt = 1
   while line:
       #print("Line {}: {}".format(cnt, line.strip()))
        print(line)
        if(cnt == 22):
            break
        line = fp.readline()
        cnt += 1


# In[31]:


# Packages for analysis
import pandas as pd
import numpy as np
from sklearn import svm

# Packages for visuals
import matplotlib.pyplot as plt
import seaborn as sns; sns.set(font_scale=1.2)

# Allows charts to appear in the notebook
get_ipython().magic('matplotlib inline')

# Pickle package
import pickle


# # Read in  malware and benign data from csv transformed from
# # "malwareBenignScores.txt"
# # Put the first 20 samples into a csv file just for easy import
# # And put them the 20 benign samples after the 20 malwares
# # see below

# In[68]:


mal = pd.read_csv('mal.csv')
mal


# # Here I only choose two attributes to train: HMM, SSD
# # I can also do OGS, but I would get the same results. 
# # So....

# In[93]:


# Plot two mals
sns.lmplot('HMM', 'SSD', data=mal, hue='Type',
           palette='Set1', fit_reg=False, scatter_kws={"s": 15});


# In[74]:


methods = mal[['HMM','SSD']].as_matrix()
type_label = np.where(mal['Type']=='Malware', 0, 1)

# Feature names
mal_features = mal.columns.values[1:].tolist()
mal_features


# # Now start training with polynomial learning machine
# # a) C = 1, P = 2

# In[112]:


model = svm.SVC(kernel='poly', C=1, degree=2)
model.fit(methods, type_label) # trainning


# # Now insert value from the next 20 malwares and benign samples to test the trainng model

# In[113]:


# Create a function to guess when a sample is a malware or a benign
def malware_or_negign(HMM, SSD):
    if(model.predict([[HMM, SSD]]))==0:
        print('Malware :(')
    else:
        print('Benign :)')


# In[114]:


malware_or_negign(-2.4591,0.381) # should be malware
malware_or_negign(-45.4216, 1.059) # should be benign
malware_or_negign(-22.3555,0.848) # should be benign


# # b) C = 3, P = 2

# In[115]:


model2 = svm.SVC(kernel='poly', C=3, degree=2)
model2.fit(methods, type_label) # trainning


# In[81]:


def malware_or_negign(HMM, SSD):
    if(model.predict([[HMM, SSD]]))==0:
        print('Malware :(')
    else:
        print('Benign :)')


# In[116]:


malware_or_negign(-2.4591,0.381) # should be malware
malware_or_negign(-45.4216, 1.059) # should be benign
malware_or_negign(-22.3555,0.848) # should be benign


# # c) C = 1, P = 4

# In[117]:


model3 = svm.SVC(kernel='poly', C=1, degree=4)
model3.fit(methods, type_label) # trainning


# # d) C = 3, P = 4

# In[118]:


model4 = svm.SVC(kernel='poly', C=3, degree=4)
model4.fit(methods, type_label) # trainning

